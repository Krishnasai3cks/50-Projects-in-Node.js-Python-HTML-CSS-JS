class App extends React.Component {
  state = {
    timertext: 'Session',
    timerclock: 25 * 60,
    breaklen: 5,
    sessionlen: 25,
    isplaying: false
  }
  constructor(props) {
    super(props);
    this.loop = undefined;
  }
  
  componentWillUnmount() {
    clearInterval(this.loop);
  }
  handlePlayPause = () => {
    const {isplaying} = this.state;
     if(isplaying){
     clearInterval(this.loop);
     this.setState({
       isplaying: false
     });
   }else{
     this.setState({
       isplaying: true
     });
     this.loop = setInterval(() => {
       const { timertext,timerclock,breaklen,sessionlen} = this.state;
       if(timerclock === 0){
         this.audioBeep.play();
         this.setState({
           timertext: (timertext === 'Session') ? 'Break': 'Session',
           timerclock: (timertext === 'Session') ? (breaklen * 60): (sessionlen * 60)
         });
       }else{
         this.setState({
           timerclock: timerclock -1
         });
       }
     },1000);
   }
  }
  reset = () => {
    this.setState({
    timertext: 'Session',
    timerclock: 25 * 60,
    breaklen: 5,
    sessionlen: 25,
    isplaying: false
    });
    this.loop && clearInterval(this.loop);
    this.audioBeep.pause();
    this.audioBeep.currentTime = 0;
  }
    handleBreakDecrease = () => {
    const { breaklen, isplaying, timertext } = this.state;
    
    if(breaklen > 1) {
      if(!isplaying && timertext === 'Break') {
        this.setState({
          breaklen: breaklen - 1,
          timerclock: (breaklen - 1) * 60
        });
      } else {
        this.setState({
          breaklen: breaklen - 1,
        });
      }
    }
  }
 handleBreakIncrease = () => {
   const { breaklen, isplaying, timertext } = this.state;
    
    if(breaklen < 60) {
      if(!isplaying && timertext === 'Break') {
        this.setState({
          breaklen: breaklen + 1,
          timerclock: (breaklen + 1) * 60
        });
      } else {
        this.setState({
          breaklen: breaklen + 1,
        });
      }
    }
  }
  
  handleSessionDecrease = () => {
   const { sessionlen, isplaying, timertext } = this.state;
    
    if(sessionlen > 1) {
      if(!isplaying && timertext === 'Session') {
        this.setState({
          sessionlen: sessionlen - 1,
          timerclock: (sessionlen - 1) * 60
        });
      } else {
        this.setState({
          sessionlen: sessionlen - 1,
        });
      }
    }
  }

  handleSessionIncrease = () => {
    const { sessionlen, isplaying, timertext } = this.state;
    
    if(sessionlen < 60) {
      if(!isplaying && timertext === 'Session') {
        this.setState({
          sessionlen: sessionlen + 1,
          timerclock: (sessionlen + 1) * 60
        });
      } else {
        this.setState({
          sessionlen: sessionlen + 1,
        });
      }
    }
  }
  
//     handleLengthChange = (count, timerType) => {
//     const { 
//       sessionlen, 
//       breaklen, 
//       isplaying, 
//       timertext
//     } = this.state;
    
//     let newCount;
    
//     if(timerType === 'session') {
//       newCount = sessionlen + count;
//     } else {
//       newCount = breaklen + count;
//     }
    
//     if(newCount > 0 && newCount < 61 && !isplaying) {
//       this.setState({
//         [`${timerType}len`]: newCount
//       });
      
//       if(timertext.toLowerCase() === timerType) {
//         this.setState({
//           timerclock: newCount * 60
//         })
//       }
//     }
//   }
//   handleSessionDecrease = () => this.handleLengthChange(-1, 'session')
//   handleSessionIncrease = () => this.handleLengthChange(1, 'session')
//   handleBreakDecrease = () => this.handleLengthChange(-1, 'break')
//   handleBreakIncrease = () => this.handleLengthChange(1,'break')
  
  
  clockstyle = (count) => {
    let minutes = Math.floor(count / 60);
    let seconds = count % 60;
    minutes = minutes< 10 ? ('0'+ minutes) : minutes;
    seconds = seconds< 10 ? ('0'+ seconds) : seconds;
    return `${minutes}:${seconds}`;
  }
  render(){
    const {timertext, timerclock, breaklen, sessionlen} = this.state;
    return(
      <div>
        <h1>POMODORO CLOCK</h1>
        <div class="topone">
          <div class="break-label">
            <p id="break-label">Break Length</p>
            <div class="breakbuts">
              <button id="break-decrement" onClick={this.handleBreakDecrease}><i class="fa fa-arrow-down"></i></button>
              <p id="break-length">{breaklen}</p>
              <button id="break-increment" onClick={this.handleBreakIncrease}><i class="fa fa-arrow-up"></i></button>
            </div>
          </div>
          <div class="session-label">
            <p id="session-label">Session Length</p>
            <div class="sessionbuts">
              <button id="session-decrement" onClick={this.handleSessionDecrease}><i class="fa fa-arrow-down"></i></button>
              <p id="session-length">{sessionlen}</p>
              <button id="session-increment" onClick={this.handleSessionIncrease}><i class="fa fa-arrow-up"></i></button>
            </div>
          </div>
        </div> 
        <div class="midone">
          <p class="timertext" id="timer-label">{timertext}</p>
          <span class="timerclock" id="time-left">{this.clockstyle(timerclock)}</span>
        </div>
        <div className="lastone">
          <button id="start_stop" onClick={this.handlePlayPause}><i className="fa fa-play"/>
            <i className="fa fa-pause"/></button>
          <button id="reset" onClick={this.reset}><i className="fa fa-refresh"></i></button>
        </div>
        <audio
          id="beep"
          preload="auto"
          src="https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav"
          ref={(audio) => {
            this.audioBeep = audio;
          }}
        />
      </div>
    );
  }
}
ReactDOM.render(<App />,document.getElementById("app"));
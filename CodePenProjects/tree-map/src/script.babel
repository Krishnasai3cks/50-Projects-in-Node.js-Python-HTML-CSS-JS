
async function run(){
  const moviesdata = await fetch("https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/movie-data.json");
  const movies = await moviesdata.json();
  const width = 960;
  const height = 600;
  
  const color = d3.scaleOrdinal(d3.schemeCategory10);
  
  //create svg here
  const svg = d3.select('#container').append('svg')
    .attr('width', width)
    .attr('height', height);
  //create svg above
  
  //tooltip
  const tooltip = d3.select("body").append("div")
  .attr("class", "tooltip")
  .attr("id", "tooltip")
  .style("opacity", 0);
  //tooltip above
  const treemap = d3.treemap()
  .size([width,height])
  .padding(1) 
  
  const root = d3.hierarchy(movies)
    .sum(d => d.value)
   

  
  treemap(root);
  
  
  console.log(root.leaves());
  const box = svg.selectAll('g')
    .data(root.leaves())
    .enter().append('g')
    .attr('transform', d => `translate(${d.x0}, ${d.y0})`);
  
  
  const unit = box.append('rect')
  .attr('class','tile')
  .attr('data-name',d=> d.data.name)
  .attr('data-category',d=> d.data.category)
  .attr('data-value',d=> d.data.value)
  .attr('width', d => d.x1 - d.x0)
  .attr('height', d => d.y1 - d.y0)
  .attr('fill',d=> color(d.data.category))
  .on('mouseover',function(d,i){
    tooltip.attr('class','tooltip')
    .attr('id','tooltip')
    .style('opacity',0.9)
    .attr('data-value',d.data.value)
    .style('left',d3.event.pageX + 'px')
    .style('top',d3.event.pageY + 'px')
    .html(`name: ${d.data.name}
          <br>
          category: ${d.data.category}
          <br>
          value: ${d.data.value}`)

  })
  .on("mouseout", function(d) { 
        tooltip.style("opacity", 0); 
      });
  
  box.append('text')
  .selectAll('tspan')
  .data(d=> d.data.name.split(' '))
  .enter()
  .append('tspan')
  .attr('style','font-size: 13px')
  .attr('x',4)
  .attr('y',(d, i) => 15 + i * 15)
  .text(d=> d);
  
  
    const categories =(root.leaves().map(d=> d.data.category).filter((item, idx, arr) => arr.indexOf(item) === idx));
  const lwidth=100;
  const recsize = 20;
  const lheight = (recsize + 6 )* categories.length;
  
  
  const legend = d3.select('body')
  .append('svg')
  .attr('id','legend')
  .attr('width',lwidth)
  .attr('height',lheight)
 
  legend.selectAll('rect')
  .data(categories)
  .enter()
  .append('rect')
  .attr('class', 'legend-item')
  .attr('fill', d => color(d))
  .attr('width',recsize)
  .attr('height',recsize)
  .attr('x',recsize/2)
  .attr('y',(d,i)=> i*(recsize+1) +10)
 
  legend.selectAll('g')
  .data(categories)
  .enter()
  .append('text')
  .attr('class','legend-text')
  .attr('x',recsize+10)
  .attr('y',(d,i)=> i*(recsize + 1) +25)
  .text(d=> d)
  
  
  
  
  
  
  }
run();